@page
@model MarketingBlogApp.Pages.IndexModel
@using Microsoft.AspNetCore.Identity
@inject UserManager<MarketingBlogApp.Models.ApplicationUser> UserManager
@{
    ViewData["Title"] = "Home page";
    Layout = "/Pages/Shared/_Layout.cshtml";
}

<div class="container-fluid d-flex">
    <!-- Sidebar -->
    <div class="sidebar flex-shrink-0 p-3">
        <h5 class="my-4">Categories</h5>
        <ul class="list-group">
            <li class="list-group-item">
                <a href="?SearchCategory=" class="text-decoration-none @(string.IsNullOrEmpty(Model.SearchCategory) ? "active" : "")">All Categories</a>
            </li>
            @foreach (var category in Model.CategoryOptions)
            {
                <li class="list-group-item">
                    <a href="?SearchCategory=@category.Name" class="text-decoration-none @(category.Name == Model.SearchCategory ? "active" : "")">@category.Name</a>
                </li>
            }
        </ul>
    </div>

    <!-- Main content -->
    <div class="main-content flex-grow-1 p-3">
        <h1 class="my-4">All Blog Posts</h1>

        <!-- Search Bar -->
        <form class="d-flex mb-4 align-items-center" method="get">
            <input type="text" name="SearchString" class="form-control search-input me-2" placeholder="Search posts..." value="@Model.SearchString" />
            <select name="SortBy" class="form-select sort-select me-2">
                <option value="date" selected>Sort by Date</option>
                <option value="likes">Sort by Likes</option>
            </select>
            <select name="SortOrder" class="form-select sort-select me-2">
                <option value="desc" selected>Descending</option>
                <option value="asc">Ascending</option>
            </select>
            <button class="btn btn-outline-primary" type="submit">Search</button>
        </form>

        <!--Styling for the search bar-->
        <style>
            .search-input {
                flex: 2; /* Make the search input larger */
                min-width: 200px; /* Set a minimum width for the search input */
            }

            .sort-select {
                flex: 1; /* Make the sorting dropdowns smaller */
                min-width: 100px; /* Set a minimum width for the sorting dropdowns */
            }

            .form-select, .form-control {
                height: 38px; /* Ensure consistent height for all form controls */
            }
        </style>

        <div class="row">
            @foreach (var post in Model.BlogPosts)
            {
                <div class="col-12 mb-4">
                    <div class="post-card h-100">
                        @if (!string.IsNullOrEmpty(post.ImageUrl))
                        {
                            <img src="@post.ImageUrl" class="card-img-top" alt="Post Image">
                        }
                        <div class="card-body">
                            <h5 class="card-title">@post.Title</h5>
                            <p class="card-text">@post.Content.Substring(0, Math.Min(100, post.Content.Length))...</p>
                            <p class="card-text">
                                <small class="text-muted">@string.Join(", ", post.BlogPostCategories.Select(bc => bc.Category.Name))</small>
                                <br />
                                <small class="text-muted">Author: @post.Author.UserName</small>
                            </p>
                        </div>
                        <div class="card-footer d-flex justify-content-between align-items-center">
                            <form method="post" asp-page-handler="ToggleLike" class="d-inline">
                                <input type="hidden" name="postId" value="@post.Id" />
                                <button type="submit" class="btn btn-link p-0 text-decoration-none">
                                    @if (post.Likes.Any(l => l.UserId == UserManager.GetUserId(User)))
                                    {
                                        <i class="fa-solid fa-heart"></i>
                                    }
                                    else
                                    {
                                        <i class="fa-regular fa-heart"></i>
                                    }
                                    @post.Likes.Count
                                </button>
                            </form>
                            <small>@post.PublishedDate.ToString("yyyy-MM-dd")</small>
                            @if (User.IsInRole("Manager"))
                            {
                                <button class="btn btn-danger btn-sm" data-bs-toggle="modal" data-bs-target="#deletePostModal-@post.Id">Delete</button>
                            }
                        </div>
                        <div id="commentSection-@post.Id" class="comment-section">
                            <h6>Comments</h6>
                            @foreach (var comment in post.Comments)
                            {
                                <div class="border p-2 mb-2 rounded">
                                    <strong>@comment.User.UserName:</strong>
                                    <p class="mb-0">@comment.Content</p>
                                    <small class="text-muted">@comment.CommentedDate.ToString("yyyy-MM-dd HH:mm")</small>
                                    @if (UserManager.GetUserId(User) == comment.UserId || UserManager.GetUserId(User) == post.AuthorId || User.IsInRole("Manager"))
                                    {
                                        <button class="btn btn-danger btn-sm mt-2" data-bs-toggle="modal" data-bs-target="#deleteCommentModal-@comment.Id"><i class="fa-solid fa-trash"></i> Delete</button>
                                    }
                                </div>

                            }
                            <form method="post" asp-page-handler="AddComment" class="mt-2">
                                <div class="input-group">
                                    <input type="hidden" name="postId" value="@post.Id" />
                                    <input type="text" name="commentContent" class="form-control" placeholder="Add a comment..." />
                                    <button type="submit" class="btn btn-primary"><i class="fa-solid fa-paper-plane"></i> Submit</button>
                                </div>
                                @if (ModelState["commentContent"]?.Errors.Count > 0)
                                {
                                    <div class="text-danger">@ModelState["commentContent"].Errors[0].ErrorMessage</div>
                                }
                            </form>
                        </div>
                    </div>

                    <!-- Delete Post Modal -->
                    <div class="modal fade" id="deletePostModal-@post.Id" tabindex="-1" aria-labelledby="deletePostModalLabel" aria-hidden="true">
                        <div class="modal-dialog">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title" id="deletePostModalLabel">Delete Post</h5>
                                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                </div>
                                <div class="modal-body">
                                    <form method="post" enctype="multipart/form-data" asp-page-handler="DeletePost">
                                        <input type="hidden" name="postId" value="@post.Id" />
                                        <div class="form-group">
                                            <label for="Reason">Reason for deletion</label>
                                            <textarea name="Reason" class="form-control" required></textarea>
                                        </div>
                                        <div class="form-group">
                                            <label for="ProofImage">Proof Image</label>
                                            <input type="file" name="ProofImage" class="form-control-file" required />
                                        </div>
                                        <button type="submit" class="btn btn-danger">Delete</button>
                                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                                    </form>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Delete Comment Modal -->
                    @foreach (var comment in post.Comments)
                    {
                        <div class="modal fade" id="deleteCommentModal-@comment.Id" tabindex="-1" aria-labelledby="deleteCommentModalLabel-@comment.Id" aria-hidden="true">
                            <div class="modal-dialog">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h5 class="modal-title" id="deleteCommentModalLabel-@comment.Id">Delete Comment</h5>
                                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                    </div>
                                    <div class="modal-body">
                                        <p>Are you sure you want to delete this comment?</p>
                                    </div>
                                    <div class="modal-footer">
                                        <form method="post" asp-page-handler="DeleteComment">
                                            <input type="hidden" name="commentId" value="@comment.Id" />
                                            <button type="submit" class="btn btn-danger">Delete</button>
                                        </form>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>

        <!-- Pagination -->
        <nav aria-label="Page navigation example">
            <ul class="pagination justify-content-center">
                <li class="page-item @(Model.CurrentPage == 1 ? "disabled" : "")">
                    <a class="page-link" href="?page=@(Model.CurrentPage - 1)" aria-label="Previous">
                        <span aria-hidden="true">&laquo;</span>
                    </a>
                </li>
                @for (int i = 1; i <= Model.TotalPages; i++)
                {
                    <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                        <a class="page-link" href="?page=@i">@i</a>
                    </li>
                }
                <li class="page-item @(Model.CurrentPage == Model.TotalPages ? "disabled" : "")">
                    <a class="page-link" href="?page=@(Model.CurrentPage + 1)" aria-label="Next">
                        <span aria-hidden="true">&raquo;</span>
                    </a>
                </li>
            </ul>
        </nav>
    </div>
    <div id="chatbot-icon" class="chatbot-icon">
        <i class="fa-brands fa-rocketchat"></i>
    </div>

    <div id="chatbot" class="chatbot-container">
        <div id="chatbot-header" class="chatbot-header">
            <h5>Bloggy Bot </h5>
            <button id="chatbot-close" class="btn-close">&times;</button>
        </div>
        <div id="chatbot-body" class="chatbot-body">
            <div id="chatbot-messages" class="chatbot-messages">
                <div class="predefined-questions">
                    <button class="question-btn">What is the purpose of this site?</button>
                    <button class="question-btn">How can I create a new blog post?</button>
                    <button class="question-btn">How can I contact support?</button>
                    <button class="question-btn">How can I search for posts?</button>
                    <button class="question-btn">What categories are available?</button>
                </div>
            </div>
            <div class="input-group">
                <input id="chatbot-input" type="text" class="form-control" placeholder="Type your message...">
                <button id="chatbot-send" class="btn btn-primary">Send</button>
            </div>
        </div>
    </div>


</div>
<style>
    .chatbot-container {
        position: fixed;
        bottom: 20px;
        right: 20px;
        width: 300px;
        max-height: 400px;
        border: 1px solid #ccc;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        background-color: white;
        display: none;
        flex-direction: column;
        z-index: 1000;
    }

    .chatbot-header {
        background-color: #007bff;
        color: white;
        padding: 10px;
        border-top-left-radius: 8px;
        border-top-right-radius: 8px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        cursor: pointer;
    }

    .chatbot-body {
        padding: 10px;
        flex: 1;
        display: flex;
        flex-direction: column;
        overflow-y: auto;
    }

    .chatbot-messages {
        flex: 1;
        overflow-y: auto;
        margin-bottom: 10px;
    }

    .chatbot-message {
        margin-bottom: 10px;
        padding: 8px;
        border-radius: 4px;
        max-width: 80%;
    }

        .chatbot-message.user {
            background-color: #007bff;
            color: white;
            align-self: flex-end;
        }

        .chatbot-message.bot {
            background-color: #f1f1f1;
            color: black;
            align-self: flex-start;
        }

    .chatbot-icon {
        position: fixed;
        bottom: 20px;
        right: 20px;
        font-size: 2em;
        cursor: pointer;
        z-index: 1000;
    }

    .predefined-questions {
        display: flex;
        flex-direction: column;
    }

    .question-btn {
        background-color: transparent;
        border: none;
        color: #007bff;
        text-align: left;
        cursor: pointer;
        padding: 5px 0;
    }

        .question-btn:hover {
            text-decoration: underline;
        }

    .input-group {
        display: flex;
    }

        .input-group input {
            flex: 1;
            border-top-left-radius: 8px;
            border-bottom-left-radius: 8px;
        }

        .input-group button {
            border-top-right-radius: 8px;
            border-bottom-right-radius: 8px;
        }

</style>

@if (TempData["Warnings"] is List<string> warnings && warnings.Count > 0)
{
    <div class="alert alert-warning alert-dismissible fade show" role="alert">
        @foreach (var warning in warnings)
        {
            <p>@warning</p>
        }
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

@if (TempData["message"] != null)
{
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="//cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>
    <script>
        toastr.success('@TempData["message"]');
    </script>
}

@if (TempData["error"] != null)
{
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="//cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>
    <script>
        toastr.error('@TempData["error"]');
    </script>
}

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const chatbotIcon = document.getElementById('chatbot-icon');
        const chatbot = document.getElementById('chatbot');
        const chatbotHeader = document.getElementById('chatbot-header');
        const chatbotClose = document.getElementById('chatbot-close');
        const chatbotInput = document.getElementById('chatbot-input');
        const chatbotSend = document.getElementById('chatbot-send');
        const chatbotMessages = document.getElementById('chatbot-messages');
        const questionButtons = document.querySelectorAll('.question-btn');

        // Open chatbot
        chatbotIcon.addEventListener('click', function () {
            chatbot.style.display = 'flex';
        });

        // Close chatbot
        chatbotClose.addEventListener('click', function () {
            chatbot.style.display = 'none';
        });

        // Send message
        chatbotSend.addEventListener('click', function () {
            const message = chatbotInput.value.trim();
            if (message) {
                addMessage('user', message);
                chatbotInput.value = '';
                getBotResponse(message);
            }
        });

        // Predefined questions
        questionButtons.forEach(button => {
            button.addEventListener('click', function () {
                const question = button.innerText;
                addMessage('user', question);
                getBotResponse(question);
            });
        });

        // Add message to chat
        function addMessage(sender, text) {
            const messageDiv = document.createElement('div');
            messageDiv.classList.add('chatbot-message', sender);
            messageDiv.textContent = text;
            chatbotMessages.appendChild(messageDiv);
            chatbotMessages.scrollTop = chatbotMessages.scrollHeight;
        }

        // Get bot response
        function getBotResponse(userMessage) {
            let response = "I'm sorry, I don't understand that.";

            const faq = [
                { question: "What is the purpose of this site?", answer: "This site allows users to browse and interact with blog posts." },
                { question: "How can I create a new blog post?", answer: "You can create a new blog post by navigating to the 'My Posts' section if you are logged in." },
                { question: "How can I contact support?", answer: "You can contact support using the 'Contact' page." },
                { question: "How can I search for posts?", answer: "Use the search bar at the top of the blog post list to search for posts." },
                { question: "What categories are available?", answer: "The categories are listed in the sidebar. Click on a category to filter posts by that category." }
            ];

            faq.forEach(faqItem => {
                if (userMessage.toLowerCase().includes(faqItem.question.toLowerCase())) {
                    response = faqItem.answer;
                }
            });

            setTimeout(function () {
                addMessage('bot', response);
            }, 1000);
        }
    });

</script>
